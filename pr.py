import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

# –ò–º–ø—É—Ç–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
from sklearn.impute import KNNImputer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score

# –ú–µ—Ç—Ä–∏–∫–∏
from sklearn.metrics import (
    confusion_matrix, accuracy_score, precision_score, 
    recall_score, f1_score, roc_auc_score, classification_report
)

# –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
from sklearn.dummy import DummyClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

# –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –±—É—Å—Ç–∏–Ω–≥–∏
from xgboost import XGBClassifier
from catboost import CatBoostClassifier

# –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV
from sklearn.metrics import roc_auc_score, classification_report, confusion_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix
import warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=RuntimeWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

from sklearn.metrics import (accuracy_score, precision_score, recall_score, 
                            f1_score, roc_auc_score, confusion_matrix, 
                            ConfusionMatrixDisplay, RocCurveDisplay)

from scipy.stats import chi2_contingency
from sklearn.metrics import mutual_info_score
from catboost import CatBoostClassifier
from sklearn.svm import SVC

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –§–∏–±–µ—Ä–∞
def phi_coefficient(x, y):
    confusion_matrix = pd.crosstab(x, y)
    chi2, _, _, _ = chi2_contingency(confusion_matrix)
    n = confusion_matrix.sum().sum()
    return np.sqrt(chi2 / n)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –§–∏–±–µ—Ä–∞
def phi_correlation_matrix(data):
    n = data.shape[1]
    phi_matrix = np.zeros((n, n))
    
    for i in range(n):
        for j in range(n):
            phi_matrix[i, j] = phi_coefficient(data.iloc[:, i], data.iloc[:, j])
    
    return pd.DataFrame(phi_matrix, index=data.columns, columns=data.columns)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def mutual_info_matrix(data):
    n = data.shape[1]
    mi_matrix = np.zeros((n, n))
    
    for i in range(n):
        for j in range(n):
            mi_matrix[i, j] = mutual_info_score(data.iloc[:, i], data.iloc[:, j])
    
    return pd.DataFrame(mi_matrix, index=data.columns, columns=data.columns)

import joblib
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
def save_models(models_dict, folder="saved_models"):
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    for model_name, model in models_dict.items():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        joblib.dump(model, os.path.join(folder, f"{model_name}.pkl"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        with open(os.path.join(folder, f"{model_name}_params.txt"), "w") as f:
            f.write(str(model.get_params()))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üß† StrokeRisk: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞",
    page_icon="ü©∫",
    layout="wide",
)

# –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
st.title("üß† StrokeRisk: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞")
st.markdown("""
    <style>
    .big-font {
        font-size: 20px !important;
        color: #2e86c1;
    }
    </style>
    """, unsafe_allow_html=True)

st.markdown('<p class="big-font">–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞</p>', unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
def load_data():
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    data = pd.read_csv(r"C:\Users\holmi\.cache\kagglehub\datasets\mahatiratusher\stroke-risk-prediction-dataset\versions\1\stroke_risk_dataset.csv", sep=',')
    return data

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data = load_data()

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tii, tav, tty = st.tabs(["üìã –û –ø—Ä–æ–µ–∫—Ç–µ", "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"])

# –í–∫–ª–∞–¥–∫–∞ 1: –û –ø—Ä–æ–µ–∫—Ç–µ
with tab1:
    st.header("üìã –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.write("""
        **StrokeRisk** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏–Ω—Å—É–ª—å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞.
        –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Å–æ–∫ —Ä–∏—Å–∫ –∏–Ω—Å—É–ª—å—Ç–∞, –∏ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è –µ–≥–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è.

        ### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
        –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∑–¥–æ—Ä–æ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∏—Å–∫ –∏–Ω—Å—É–ª—å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
        - **–í–æ–∑—Ä–∞—Å—Ç**: –° –≤–æ–∑—Ä–∞—Å—Ç–æ–º —Ä–∏—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä! –ó–Ω–∞—è —Å–≤–æ–∏ —Ä–∏—Å–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã.
        - **–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ**: –í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω, –Ω–æ —Å –Ω–∏–º –º–æ–∂–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏.
        - **–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ**: –ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–≥–Ω–∞–ª–æ–º. –ù–æ –Ω–µ —Å—Ç–æ–∏—Ç –ø—É–≥–∞—Ç—å—Å—è ‚Äî –ª—É—á—à–µ –≤–æ–≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã.
        - **–•–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏ –∏ –Ω–æ–≥–∏**: –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–æ –¥–∞–∂–µ —Ç–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.

        –ú—ã —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ ‚Äî –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ.

        ### –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?
        –ò–Ω—Å—É–ª—å—Ç ‚Äî —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å –Ω–∏–º –Ω–µ–ª—å–∑—è —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è. –ú–Ω–æ–≥–∏–µ —Å–ª—É—á–∞–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å, –µ—Å–ª–∏ –≤–æ–≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –í–æ—Ç –ø–æ—á–µ–º—É StrokeRisk –±—ã–ª —Å–æ–∑–¥–∞–Ω:
        - **–†–∞–Ω–Ω–µ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ**: –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–∞–º —É–∑–Ω–∞—Ç—å –æ —Ä–∏—Å–∫–∞—Ö –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º–æ–π. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω ‚Äî –∑–Ω–∞—á–∏—Ç –≤–æ–æ—Ä—É–∂–µ–Ω!
        - **–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —É–¥–æ–±—Å—Ç–≤–æ**: –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –∏–º –º–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π. –ù–∏–∫–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        - **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥**: –ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.
        - **–û–ø—Ç–∏–º–∏–∑–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞**: –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –∏ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏.

        ### –ö–æ–º—É —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ?
        - **–õ—é–¥—è–º —Å—Ç–∞—Ä—à–µ 40 –ª–µ—Ç**: –° –≤–æ–∑—Ä–∞—Å—Ç–æ–º –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –º—É–¥—Ä–µ–µ, –∏ –≤–∞–∂–Ω–æ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ –µ—â–µ –±–æ–ª—å—à–µ.
        - **–¢–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è**: –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è, –¥–∏–∞–±–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä, –∞ –ø–æ–≤–æ–¥ –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∫ —Å–µ–±–µ.
        - **–í—Å–µ–º, –∫—Ç–æ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ**: –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Ä–∏—Å–∫–∏ ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è.

        ### –ù–∞—à–∞ –º–∏—Å—Å–∏—è
        –ú—ã —Å–æ–∑–¥–∞–ª–∏ StrokeRisk, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —ç—Ç–æ –≤–∞—à —Å–æ—é–∑–Ω–∏–∫ –≤ –∑–∞–±–æ—Ç–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ. –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –ª—É—á—à–µ, –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç—Ç–æ —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö, –Ω–æ –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤.
    """)

# –í–∫–ª–∞–¥–∫–∞ 2: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
with tab2:
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
    st.subheader("üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
    st.write(f"**–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã):** {data.shape}")
    st.write("""
        **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
        - –í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫—Ä–æ–º–µ **Age** –∏ **At Risk (Binary)**, —è–≤–ª—è—é—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ (0 –∏–ª–∏ 1).
        - **Age** ‚Äî —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ (–≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞).
        - **At Risk (Binary)** ‚Äî –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –∫ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞ (0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞).
        
        **–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:**
        - –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤.
    """)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    st.markdown("""
        ### **–°–∏–º–ø—Ç–æ–º—ã –∏ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞**
        | –ü—Ä–∏–∑–Ω–∞–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è |
        |---------|----------|--------------------|
        | **Chest Pain** (–ë–æ–ª—å –≤ –≥—Ä—É–¥–∏) | –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –±–æ–ª—å –≤ –≥—Ä—É–¥–∏? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Shortness of Breath** (–û–¥—ã—à–∫–∞) | –¢—Ä—É–¥–Ω–æ –ª–∏ –≤–∞–º –¥—ã—à–∞—Ç—å? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Irregular Heartbeat** (–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—É–ª—å—Å) | –ë—ã–≤–∞–µ—Ç –ª–∏ —É –≤–∞—Å –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Fatigue & Weakness** (–£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Å–ª–∞–±–æ—Å—Ç—å) | –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Dizziness** (–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ) | –ß–∞—Å—Ç–æ –ª–∏ —É –≤–∞—Å –∫—Ä—É–∂–∏—Ç—Å—è –≥–æ–ª–æ–≤–∞? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Swelling (Edema)** (–û—Ç—ë–∫–∏) | –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ç—ë–∫–∏ –Ω–∞ –Ω–æ–≥–∞—Ö, —Ä—É–∫–∞—Ö –∏–ª–∏ –ª–∏—Ü–µ? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Pain in Neck/Jaw/Shoulder/Back** (–ë–æ–ª—å –≤ —à–µ–µ, —á–µ–ª—é—Å—Ç–∏, –ø–ª–µ—á–µ –∏–ª–∏ —Å–ø–∏–Ω–µ) | –ò—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –±–æ–ª—å –≤ —ç—Ç–∏—Ö —á–∞—Å—Ç—è—Ö —Ç–µ–ª–∞? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Excessive Sweating** (–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø–æ—Ç–æ–æ—Ç–¥–µ–ª–µ–Ω–∏–µ) | –ó–∞–º–µ—á–∞–ª–∏ –ª–∏ –≤—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –ø–æ—Ç–æ–æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Persistent Cough** (–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–∞—à–µ–ª—å) | –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ç–æ–π–∫–∏–π –∫–∞—à–µ–ª—å? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Nausea/Vomiting** (–¢–æ—à–Ω–æ—Ç–∞ –∏–ª–∏ —Ä–≤–æ—Ç–∞) | –ë—ã–≤–∞–µ—Ç –ª–∏ —É –≤–∞—Å —Ç–æ—à–Ω–æ—Ç–∞ –∏–ª–∏ —Ä–≤–æ—Ç–∞? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **High Blood Pressure** (–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ) | –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —É –≤–∞—Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Chest Discomfort (Activity)** (–î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≥—Ä—É–¥–∏ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ) | –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≥—Ä—É–¥–∏ –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Cold Hands/Feet** (–•–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏ –∏–ª–∏ –Ω–æ–≥–∏) | –ß–∞—Å—Ç–æ –ª–∏ —É –≤–∞—Å —Ö–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏ –∏–ª–∏ –Ω–æ–≥–∏? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Snoring/Sleep Apnea** (–•—Ä–∞–ø –∏–ª–∏ –∞–ø–Ω–æ—ç —Å–Ω–∞) | –•—Ä–∞–ø–∏—Ç–µ –ª–∏ –≤—ã –∏–ª–∏ —Å—Ç—Ä–∞–¥–∞–µ—Ç–µ –æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥—ã—Ö–∞–Ω–∏—è –≤–æ —Å–Ω–µ? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
        | **Anxiety/Feeling of Doom** (–¢—Ä–µ–≤–æ–≥–∞ –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ –Ω–∞–¥–≤–∏–≥–∞—é—â–µ–π—Å—è –±–µ–¥—ã) | –ò—Å–ø—ã—Ç—ã–≤–∞–ª–∏ –ª–∏ –≤—ã –Ω–µ–æ–±—ä—è—Å–Ω–∏–º—É—é —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ —Å–ª—É—á–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |

        ### **–î—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏**
        | –ü—Ä–∏–∑–Ω–∞–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è |
        |---------|----------|--------------------|
        | **Age** (–í–æ–∑—Ä–∞—Å—Ç) | –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç | –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45) |
        | **Stroke Risk (%)** (–†–∏—Å–∫ –∏–Ω—Å—É–ª—å—Ç–∞, %) | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Å—É–ª—å—Ç–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –º–æ–¥–µ–ª–∏ | –û—Ç 0 –¥–æ 100 |
        | **At Risk (Binary)** (–ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞) | –û—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –ª–∏ –≤—ã –∫ –≥—Ä—É–ø–ø–µ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞? | 0 ‚Äì –Ω–µ—Ç, 1 ‚Äì –¥–∞ |
    """)
    
    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω—ã–º:**")
    st.write(data.drop('Stroke Risk (%)', axis=1).describe())

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (At Risk (Binary)):**")
    st.write(data['At Risk (Binary)'].value_counts())

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞ (At Risk (Binary) == 1)
    st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞ (At Risk (Binary) == 1):**")
    st.write(data.loc[data['At Risk (Binary)'] == 1, \
    ['Age', 'Dizziness', 'High Blood Pressure', 'Cold Hands/Feet']] \
    .describe().loc[['mean', 'min', '50%', 'max']])

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ä–∏—Å–∫–∞ (At Risk (Binary) == 0)
    st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ä–∏—Å–∫–∞ (At Risk (Binary) == 0):**")
    st.write(data.loc[data['At Risk (Binary)'] == 0, \
    ['Age', 'Dizziness', 'High Blood Pressure', 'Cold Hands/Feet']] \
    .describe().loc[['mean', 'min', '50%', 'max']])

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", expanded=True):
        tab1, tab2, tab3, tab4 = st.tabs(["üìå –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", "üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", "üìâ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ü–∏—Ä—Å–æ–Ω)", "üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–§–∏–±–µ—Ä–∞)"])

    # Tab 1: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    with tab1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        binary_cols = [col for col in data.columns if data[col].nunique() == 2 and col not in ['Age']]

        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
        selected_binary_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", binary_cols, index=0)

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        fig, ax = plt.subplots(figsize=(5, 3))  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
        sns.countplot(x=data[selected_binary_col], ax=ax, palette='pastel', edgecolor='.2')
        ax.set_title(f'{selected_binary_col} Distribution', fontsize=10)
        ax.set_xlabel(selected_binary_col, fontsize=8)
        ax.set_ylabel('Count', fontsize=8)
        ax.tick_params(labelsize=6)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for p in ax.patches:
            height = p.get_height()
            ax.text(p.get_x()+p.get_width()/2., height + 3, f'{height/data.shape[0]:.1%}', 
                   ha='center', fontsize=6)

        plt.tight_layout()
        st.pyplot(fig)

    # Tab 2: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    with tab2:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        num_cols = ['Age']

        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
        selected_num_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫", num_cols, index=0)

        # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        fig, ax = plt.subplots(figsize=(5, 3))  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
        sns.histplot(data[selected_num_col], kde=True, ax=ax, color='skyblue', edgecolor='.2')
        ax.set_title(f'Distribution of {selected_num_col}', fontsize=10)
        ax.set_xlabel(selected_num_col, fontsize=8)
        ax.set_ylabel('Density', fontsize=8)
        plt.tight_layout()
        st.pyplot(fig)

        # –°—Ç—Ä–æ–∏–º –±–æ–∫—Å–ø–ª–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        st.subheader("–í—ã–±—Ä–æ—Å—ã –≤ —á–∏—Å–ª–æ–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ")
        fig, ax = plt.subplots(figsize=(5, 3))  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
        sns.boxplot(x=data[selected_num_col], ax=ax, color='lightgreen', width=0.4)
        ax.set_title(f'Boxplot for {selected_num_col}', fontsize=10)
        ax.set_xlabel(selected_num_col, fontsize=8)
        plt.tight_layout()
        st.pyplot(fig)

    # Tab 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ü–∏—Ä—Å–æ–Ω)
    with tab3:
        st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–ü–∏—Ä—Å–æ–Ω)")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        plt.figure(figsize=(12, 8))  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        num_data = data.select_dtypes(include=['number']).drop('Stroke Risk (%)', axis=1)

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        corr = num_data.corr()

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        mask = np.triu(np.ones_like(corr, dtype=bool))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
        sns.heatmap(
            corr, 
            mask=mask, 
            annot=True, 
            fmt='.1f',  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            cmap='coolwarm',
            cbar_kws={'label': 'Correlation Coefficient'}, 
            linewidths=0.5, 
            linecolor='white',
            annot_kws={'size': 8},  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            vmin=-1, vmax=1  # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        plt.xticks(rotation=45, ha='right', fontsize=10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
        plt.yticks(fontsize=10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ Y
        plt.title('Correlation Matrix (Pearson)', fontsize=12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
        st.pyplot(plt.gcf())

    # Tab 4: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–§–∏–±–µ—Ä–∞)
    with tab4:
        st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–§–∏–±–µ—Ä–∞)")

        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –§–∏–±–µ—Ä–∞
        corr = phi_correlation_matrix(data.drop('Stroke Risk (%)', axis=1))

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(12, 8))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
        sns.heatmap(
            corr, 
            annot=True, 
            fmt='.2f',  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            cmap='coolwarm',
            cbar_kws={'label': 'Phi Coefficient'}, 
            linewidths=0.5, 
            linecolor='white',
            annot_kws={'size': 8},  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            vmin=-1, vmax=1  # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        plt.xticks(rotation=45, ha='right', fontsize=10)
        plt.yticks(fontsize=10)
        plt.title('Correlation Matrix (Phi Coefficient)', fontsize=12)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
        st.pyplot(plt.gcf())

# –í–∫–ª–∞–¥–∫–∞ 3: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
# –í–∫–ª–∞–¥–∫–∞ 3: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
with tii:
    st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    if 'best_model_name' in st.session_state:
        st.success(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {st.session_state.best_model_name}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π
    models_config = {
        'KNN': {
            'model': KNeighborsClassifier(),
            'params': {
                'n_neighbors': [11],
                'weights': ['uniform'],
                'metric': ['manhattan']
            }
        },
        'Logistic Regression': {
            'model': LogisticRegression(max_iter=600),
            'params': {
            'C': [0.01],  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
            'penalty': ['l2'],  # L2-—Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            'solver': ['liblinear'],  # –ë—ã—Å—Ç—Ä—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            'class_weight': [None]  # –ë–µ–∑ —É—á—ë—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
            }
        },
        'Random Forest': {
            'model': RandomForestClassifier(),
            'params': {
                'n_estimators': [130],
                'max_depth': [7],
                'min_samples_split': [5],
                'min_samples_leaf': [2],
                'class_weight': [None]
            }
        },
        'XGBoost': { 
            'model': XGBClassifier(),
            'params': {
                'learning_rate': [0.01],   # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
                'max_depth': [3],         # –ù–µ–±–æ–ª—å—à–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                'n_estimators': [100],    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                'subsample': [0.8],       # –ò—Å–ø–æ–ª—å–∑—É–µ–º 80% –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                'colsample_bytree': [0.8] # –ò—Å–ø–æ–ª—å–∑—É–µ–º 80% –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            }
        },
        'CatBoost': {
            'model': CatBoostClassifier(verbose=0),
            'params': {
                'iterations': [200],     # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                'depth': [6],           # –°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                'learning_rate': [0.01], # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                'l2_leaf_reg': [3]       # –£—Å–∏–ª–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            }
        },
        'SVM': {
            'model': SVC(probability=True),
            'params': {
                'C': [1],         # –°—Ä–µ–¥–Ω—è—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
                'kernel': ['rbf'], # –ì–∞—É—Å—Å–æ–≤–æ —è–¥—Ä–æ –¥–ª—è –ª—É—á—à–µ–π –æ–±–æ–±—â–∞–µ–º–æ—Å—Ç–∏
                'gamma': ['scale'] # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä Œ≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            }
        }
    }

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    # –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ Stroke Risk (%)
    X = data.drop(['At Risk (Binary)', 'Stroke Risk (%)'], axis=1)
    y = data['At Risk (Binary)']
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    num_cols = ['Age']
    scaler = StandardScaler()
    X[num_cols] = scaler.fit_transform(X[num_cols])
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", list(models_config.keys()))
    
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
            
            # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            grid_search = GridSearchCV(
                estimator=models_config[selected_model]['model'],
                param_grid=models_config[selected_model]['params'],
                cv=cv,
                scoring='f1',
                n_jobs=-1
            )
            grid_search.fit(X_train, y_train)
            best_model = grid_search.best_estimator_

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ session_state
            if 'best_model' not in st.session_state:
                st.session_state.best_model = {}
            st.session_state.best_model[selected_model] = best_model
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –¥–∏—Å–∫
            save_models({selected_model: best_model})
            
            st.success(f"–ú–æ–¥–µ–ª—å {selected_model} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
            # –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            y_pred = best_model.predict(X_test)
            metrics = {
                'Accuracy': accuracy_score(y_test, y_pred),
                'Precision': precision_score(y_test, y_pred),
                'Recall': recall_score(y_test, y_pred),
                'F1-score': f1_score(y_test, y_pred),
                'ROC-AUC': roc_auc_score(y_test, best_model.predict_proba(X_test)[:, 1])
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if 'model_metrics' not in st.session_state:
                st.session_state.model_metrics = {}
            st.session_state.model_metrics[selected_model] = metrics
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ F1-score
            if 'best_model_name' not in st.session_state:
                st.session_state.best_model_name = selected_model
            else:
                current_best_f1 = st.session_state.model_metrics[st.session_state.best_model_name]['F1-score']
                if metrics['F1-score'] > current_best_f1:
                    st.session_state.best_model_name = selected_model
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
                st.write(grid_search.best_params_)
                
                st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
                df_metrics = pd.DataFrame([metrics]).T.reset_index()
                df_metrics.columns = ['Metric', 'Value']
                st.dataframe(
                    df_metrics.style.format({
                        'Value': '{:.2%}' if 'Accuracy' in df_metrics['Metric'].values else '{:.3f}'
                    }),
                    height=300
                )
                
            with col2:
                st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
                fig, ax = plt.subplots()
                ConfusionMatrixDisplay.from_estimator(best_model, X_test, y_test, ax=ax)
                st.pyplot(fig)
                
                st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
                fig, ax = plt.subplots()
                RocCurveDisplay.from_estimator(best_model, X_test, y_test, ax=ax)
                st.pyplot(fig)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            with st.expander("üìä –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
                st.write(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑–∞–ª–∞ —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ {cv.n_splits} —Ñ–æ–ª–¥–∞—Ö:")
                st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{grid_search.best_score_:.2%}")
                
                st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ñ–æ–ª–¥–∞–º:")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
                cv_scores = [grid_search.cv_results_[f'split{i}_test_score'][grid_search.best_index_] for i in range(cv.n_splits)]
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                fig, ax = plt.subplots(figsize=(8, 4))
                sns.boxplot(x=cv_scores, ax=ax)
                ax.set_xlabel('Accuracy')
                ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ñ–æ–ª–¥–∞–º')
                st.pyplot(fig)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    if 'model_metrics' in st.session_state:
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        metrics_df = pd.DataFrame(st.session_state.model_metrics).T
        st.dataframe(metrics_df.style.format("{:.2%}"))
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")
        fig, ax = plt.subplots(figsize=(10, 6))
        metrics_df.plot(kind='bar', ax=ax)
        ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π")
        ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        ax.set_xlabel("–ú–æ–¥–µ–ª—å")
        plt.xticks(rotation=45)
        st.pyplot(fig)

# –í–∫–ª–∞–¥–∫–∞ 4: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
with tav:
    st.header("üß™ –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns(2)
    
    with col1:
        age = st.slider("–í–æ–∑—Ä–∞—Å—Ç (Age)", min_value=0, max_value=100, value=50)
        dizziness = st.selectbox("–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ (Dizziness)", [0, 1])
        high_bp = st.selectbox("–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (High Blood Pressure)", [0, 1])
        cold_hands = st.selectbox("–•–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏/–Ω–æ–≥–∏ (Cold Hands/Feet)", [0, 1])
        headache = st.selectbox("–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å (Headache)", [0, 1])
        blurred_vision = st.selectbox("–†–∞–∑–º—ã—Ç–æ–µ –∑—Ä–µ–Ω–∏–µ (Blurred Vision)", [0, 1])
        weakness = st.selectbox("–°–ª–∞–±–æ—Å—Ç—å (Weakness)", [0, 1])
        
    with col2:
        anxiety = st.selectbox("–¢—Ä–µ–≤–æ–≥–∞/–ß—É–≤—Å—Ç–≤–æ –æ–±—Ä–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ (Anxiety/Feeling of Doom)", [0, 1])
        nausea = st.selectbox("–¢–æ—à–Ω–æ—Ç–∞/–†–≤–æ—Ç–∞ (Nausea/Vomiting)", [0, 1])
        fatigue = st.selectbox("–£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Å–ª–∞–±–æ—Å—Ç—å (Fatigue & Weakness)", [0, 1])
        snoring = st.selectbox("–•—Ä–∞–ø/–ê–ø–Ω–æ—ç —Å–Ω–∞ (Snoring/Sleep Apnea)", [0, 1])
        chest_pain = st.selectbox("–ë–æ–ª—å –≤ –≥—Ä—É–¥–∏ (Chest Pain)", [0, 1])
        chest_discomfort = st.selectbox("–î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≥—Ä—É–¥–∏ (Chest Discomfort (Activity))", [0, 1])
        irregular_heartbeat = st.selectbox("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ (Irregular Heartbeat)", [0, 1])
        pain_neck_jaw = st.selectbox("–ë–æ–ª—å –≤ —à–µ–µ/—á–µ–ª—é—Å—Ç–∏/–ø–ª–µ—á–µ/—Å–ø–∏–Ω–µ (Pain in Neck/Jaw/Shoulder/Back)", [0, 1])
        excessive_sweating = st.selectbox("–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø–æ—Ç–æ–æ—Ç–¥–µ–ª–µ–Ω–∏–µ (Excessive Sweating)", [0, 1])
        swelling = st.selectbox("–û—Ç—ë–∫–∏ (Swelling (Edema))", [0, 1])
        persistent_cough = st.selectbox("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–∞—à–µ–ª—å (Persistent Cough)", [0, 1])
        shortness_of_breath = st.selectbox("–û–¥—ã—à–∫–∞ (Shortness of Breath)", [0, 1])
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    input_data = pd.DataFrame({
        'Age': [age],
        'Dizziness': [dizziness],
        'High Blood Pressure': [high_bp],
        'Cold Hands/Feet': [cold_hands],
        'Headache': [headache],
        'Blurred Vision': [blurred_vision],
        'Weakness': [weakness],
        'Anxiety/Feeling of Doom': [anxiety],
        'Nausea/Vomiting': [nausea],
        'Fatigue & Weakness': [fatigue],
        'Snoring/Sleep Apnea': [snoring],
        'Chest Pain': [chest_pain],
        'Chest Discomfort (Activity)': [chest_discomfort],
        'Irregular Heartbeat': [irregular_heartbeat],
        'Pain in Neck/Jaw/Shoulder/Back': [pain_neck_jaw],
        'Excessive Sweating': [excessive_sweating],
        'Swelling (Edema)': [swelling],
        'Persistent Cough': [persistent_cough],
        'Shortness of Breath': [shortness_of_breath]
    })
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    input_data[['Age']] = scaler.transform(input_data[['Age']])
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", list(models_config.keys()))
    
    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫ –∏–Ω—Å—É–ª—å—Ç–∞"):
        if 'best_model' not in st.session_state:
            st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ'")
        else:
            model = st.session_state.best_model[selected_model]
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            missing_features = set(X_train.columns) - set(input_data.columns)
            if missing_features:
                st.error(f"–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
            else:
                # –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ —Ç–æ–º—É, —á—Ç–æ –±—ã–ª –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
                input_data = input_data[X_train.columns]
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                prediction = model.predict(input_data)[0]
                proba = model.predict_proba(input_data)[0][1]
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", "–†–∏—Å–∫" if prediction == 1 else "–ù–µ—Ç —Ä–∏—Å–∫–∞")
                    
                with col2:
                    st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–∞", f"{proba:.1%}")
                    
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                fig, ax = plt.subplots(figsize=(6, 1))
                ax.barh(['–†–∏—Å–∫'], [proba], color='skyblue')
                ax.set_xlim(0, 1)
                ax.set_xticks([0, 0.25, 0.5, 0.75, 1])
                ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%'])
                ax.set_title("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞")
                st.pyplot(fig)

# Tab 5: –ö–æ–Ω—Ç–∞–∫—Ç—ã
with tty:
    st.header("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏")
    st.write("""
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ –ø–∏—à–∏—Ç–µ –º–Ω–µ:
        - üìß Telegram: @Iskandarov75
    """)
